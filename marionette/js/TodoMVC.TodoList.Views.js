// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TodoMVC.module("TodoList.Views", function(Views, App, Backbone, Marionette, $, _) {
    var _ref, _ref1,
      _this = this;
    Views.ItemView = (function(_super) {
      __extends(ItemView, _super);

      function ItemView() {
        _ref = ItemView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ItemView.prototype.tagName = "li";

      ItemView.prototype.template = "#template-todoItemView";

      ItemView.prototype.ui = {
        edit: ".edit"
      };

      ItemView.prototype.events = {
        "click .destroy": "destroy",
        "dblclick label": "onEditClick",
        "keypress .edit": "onEditKeypress",
        "blur .edit": "onEditBlur",
        "click .toggle": "toggle"
      };

      ItemView.prototype.initialize = function() {
        return this.listenTo(this.model, "change", this.render);
      };

      ItemView.prototype.onRender = function() {
        this.$el.removeClass("active completed");
        if (this.model.get("completed")) {
          return this.$el.addClass("completed");
        } else {
          return this.$el.addClass("active");
        }
      };

      ItemView.prototype.destroy = function() {
        return this.model.destroy();
      };

      ItemView.prototype.toggle = function() {
        return this.model.toggle().save();
      };

      ItemView.prototype.onEditClick = function() {
        this.$el.addClass("editing");
        return this.ui.edit.focus();
      };

      ItemView.prototype.updateTodo = function() {
        var todoText;
        todoText = this.ui.edit.val();
        if (todoText === "") {
          this.destroy();
        }
        this.setTodoText(todoText);
        return this.completeEdit();
      };

      ItemView.prototype.onEditBlur = function() {
        return this.updateTodo();
      };

      ItemView.prototype.onEditKeypress = function(e) {
        var ENTER_KEY;
        ENTER_KEY = 13;
        if (e.which === ENTER_KEY) {
          return this.updateTodo();
        }
      };

      ItemView.prototype.setTodoText = function(todoText) {
        if (todoText.trim() === "") {
          return;
        }
        return this.model.set("title", todoText).save();
      };

      ItemView.prototype.completeEdit = function() {
        return this.$el.removeClass("editing");
      };

      return ItemView;

    })(Marionette.ItemView);
    Views.ListView = (function(_super) {
      __extends(ListView, _super);

      function ListView() {
        _ref1 = ListView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      ListView.prototype.template = "#template-todoListCompositeView";

      ListView.prototype.itemView = Views.ItemView;

      ListView.prototype.itemViewContainer = "#todo-list";

      ListView.prototype.ui = {
        toggle: "#toggle-all"
      };

      ListView.prototype.events = {
        "click #toogle-all": "onToggleAllClick"
      };

      ListView.prototype.initialize = function() {
        this.listenTo(this.collection, "all", this.update);
        return {
          onRender: function() {
            return this.update();
          },
          update: function() {
            var allCompleted, reduceCompleted;
            reduceCompleted = function(left, right) {
              return left && right.get("completed");
            };
            allCompleted = this.collection.reduce(reduceCompleted, true);
            this.ui.toggle.prop("checked", allCompleted);
            return this.$el.parent().toggle(!!this.collection.length);
          },
          onToggleAllClick: function(e) {
            var isChecked;
            isChecked = e.currentTarget.checked;
            return this.collection.each(function(todo) {
              return todo.save({
                "completed": isChecked
              });
            });
          }
        };
      };

      return ListView;

    })(Backbone.Marionette.CompositeView);
    return App.vent.on("todoList:filter", function(filter) {
      filter = filter || "all";
      return $("#todoapp").attr("class", "filter-" + filter);
    });
  });

}).call(this);
